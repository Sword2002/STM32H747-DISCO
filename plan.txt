STM32H747I-DISCO学习步骤：

1. 通过CubeMX生成基础工程，完成编译后通过ST-LINK加载到片上               OK
2. 参考双核例子，完成双核启动，通过LED指示启动过程                       OK
3. 在主核CM7上集成FreeRTOS, 完成任务创建，能成功运行一个LED闪烁的任务     OK

4. 参考例子，完成LCD的简单显示调试信息
5. 参考例子，完成配置串口通讯，用于打印调试信息                          OK
    1). 参考K2实现DMA模式的TX和RX                                      OK

6. 参考例子，实现按键检测(中断)，使用信号量启动按键处理任务               OK
7. FreeRTOS的所有功能：
    1). 任务创建，任务管理信号量        OK
    2). 消息队列                      OK       使用xQueueOverwrite时，消息队列的长度只能是1
    3). 互斥量
    4). 事件组                        OK
    5). 任务通知                      OK       二值信号量、计数信号量、事件组，也可以替代 长度为 1 的队列
    6). 软件定时器                    OK
    7). 内存管理                      OK       heap_4/heap_5/heap_1
    8). 中断管理                      OK
    9). CPU占用率                     OK
    10). 任务堆栈使用率                OK
    11). AMP 调度策略(非对称多处理)
    12). 流缓存区的写入/读取，是不是可以用来做内存共享？
    13). IDLE HOOK                     OK, 把shell任务放在IDLE内运行
    14). Systick HOOK，使能回调，是不是就可以不用修改SysTick_Handler？    FAIL




8. 集成shell调试器功能                             OK，shell集成遇到的问题：
    1). 按键响应问题，比如方向键(已经解决：任务内不能加延时)

9-1. 集成文件系统
    1). 集成littlefs                               OK
    2). 通过lfs，在FLASH上测试lfs的所有接口功能      OK
    3). 测试lfs性能
    4). 尝试优化lfs性能(CSDN上有说lfs性能差)

9-2. 集成文件系统
    1). 集成fatfs                                  OK
    2). 通过fatfs，在FLASH上测试fatfs的所有接口功能  OK: open/close/read/write/mkdir/unlik
    3). 测试fatfs性能
    4). 尝试优化fatfs性能()

9-3. 集成文件系统
    1). 集成uc-fs
    2). 通过uc-fs，在FLASH上测试uc-fs的所有接口功能
    3). 测试uc-fs性能
    4). 尝试优化uc-fs性能()
    5). 对三个FS进行比较

10. 在外扩FLASH上实现文件读写
    1). 熟悉SPI/DSPI/QSPI                         OK
    2). 通过QSPI对MT25QL实现读写                   OK
    3). 优化QSPI的性能

11. 在EEPROM上实现文件读写                         没有EEPROM
12. 理解STM32H747的HSEM的工作原理，硬件信号量       OK
13. 实现RTC
14. 内存共享，实现CM4和CM7进行数据交互              OK

15. CM4核移植FreeRTOS，创建一个LED任务             OK
16. CM4集成USART2串口通讯，使能打印                OK,将接收的内容重新发送出来
17. 内存保护单元（MPU）
18. 实现USB